#include<stdio.h>
#include<stdlib.h>
struct node
{
int data;
struct node *next;
};
typedef struct node *NODE;
NODE createNodeInCLL()
{
	NODE temp;
	temp=(NODE)malloc(sizeof(struct node));
	temp->next=NULL;
	return temp;
}
NODE insertAtPositionInCLL(NODE first,int position,int x){
	NODE temp, lastNode=first;
	for(int x=1;x<(position-1);x++)
		{
			if(lastNode->next==first)
			{
				printf("Position not found\n");
				return first;
			}
			lastNode=lastNode->next;-
		}
	if(position<=0 || (position>1 && first==NULL)){
		printf("Position not found");
	}
	else{
		temp=createNodeInCLL();
		temp->data=x;
		if(position==1)
		{
			if(first==NULL){
				first=temp;
				temp->next=first;
			}
			else{
				while(lastNode->next!=first){
					lastNode=lastNode->next;
				}
				temp->next=first;
				first=temp;
				lastNode->next=first;
			}
		}
		else{
			temp->next=lastNode->next;
			lastNode->next=temp;
		}
	}
	return first;
}
NODE deleteAtPositionInCLL(NODE first,int position)
{
	if(first==NULL)
		return first;
	NODE temp=first,prev=NULL;
	int count=1;
	if(position==1){
		while(temp->next!=first)
			temp=temp->next;
		if(temp==first){
			printf("Deleted element: %d\n",first->data);
			free(first);
			return NULL;
		}
		temp->next=first->next;
		printf("Deleted element: %d\n",first->data);
		free(first);
		return temp->next;
	}
	temp=first;
	while(count<position){
		prev=temp;
		temp=temp->next;
		count++;
		if(temp==first){
			printf("Position not found\n");
			return first;
		}
	}
	prev->next=temp->next;
	printf("Deleted element: %d\n",temp->data);
	free(temp);
	return first;
		
	
}
void traverseListInCLL(NODE first){
	NODE temp=first;
	if(first==NULL)
		printf("CLL is empty\n");
	else{
		do{
			printf("%d --> ",temp->data);
			temp=temp->next;
		}
			while(temp!=first);
		printf("\n");
	}
}
NODE reverseCLL(NODE first){
	NODE prev=NULL, current=first, next=NULL, head=first;
	if(first==NULL || first->next==first)
		return first;
	do{
		next=current->next;
		current->next=prev;
		prev=current;
		current=next;
		
	}
		while(current!=first);
	first->next=prev;
	first=prev;
	return first;
}

void main() {
    NODE first = NULL;
    int x, pos, op;
    while (1) {
        printf("1.Insert 2.Delete 3.Display 4.Reverse 5.Exit\n");
        printf("choice: ");
        scanf("%d", &op);
        switch (op) {
            case 1:
                printf("Position: ");
                scanf("%d", &pos);
                if (pos <= 0) {
                    printf("Position not found\n");
                } else {
                    printf("Element: ");
                    scanf("%d", &x);
                    first = insertAtPositionInCLL(first, pos, x);
                }
                break;
            case 2:
                if (first == NULL) {
                    printf("CLL is empty\n");
                } else {
                    printf("Position: ");
                    scanf("%d", &pos);
                    first = deleteAtPositionInCLL(first, pos);
                }
                break;
            case 3:
                if (first == NULL) {
                    printf("CLL is empty\n");
                } else {
                    printf("Elements in CLL are: ");
                    traverseListInCLL(first);
                }
                break;
            case 4:
                if (first == NULL) {
                    printf("CLL is empty\n");
                } else {
                    first = reverseCLL(first);
                    printf("CLL reversed\n");
                }
                break;
            case 5:
                exit(0);
        }
    }
}

